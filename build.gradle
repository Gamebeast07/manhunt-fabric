plugins {
    id "fabric-loom" version "0.5-SNAPSHOT"
    id "maven-publish"
    id "com.modrinth.minotaur" version "1.1.0"
}

repositories {
    jcenter()
}

class Globals {
    static def mcVer = "1.16.4"
    static def yarnVer = "7"
    static def loaderVer = "0.10.8"
    static def fapiVer = "0.28.3+1.16"

    static def modVer = "2.0.0"

    static def modrinthId = "z0z6kFjN"
    static String modrinthChangelog = null
    static def modrinthMcVers = ["1.16.2", "1.16.3", "1.16.4", "20w45a", "20w46a", "20w48a", "20w49a"]
}


allprojects {
    apply plugin: "fabric-loom"

    group = "io.github.ytg1234"

    dependencies {
        //to change the versions see the gradle.properties file
        minecraft("com.mojang:minecraft:${Globals.mcVer}")
        mappings("net.fabricmc:yarn:${Globals.mcVer}+build.${Globals.yarnVer}:v2")
        modImplementation("net.fabricmc:fabric-loader:${Globals.loaderVer}")

        modImplementation("net.fabricmc.fabric-api:fabric-api:${Globals.fapiVer}")
    }

    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    // Ensure that compiling with newer Java versions still warns/fails when using classes
    // or methods only present in versions newer than 8, so we can safely compile with Java 11
    // or 15
    tasks.withType(JavaCompile).configureEach {
        def targetVersion = 8
        if (JavaVersion.current().isJava9Compatible()) {
            it.options.release = targetVersion
        } else {
            sourceCompatibility = JavaVersion.toVersion(targetVersion)
            targetCompatibility = JavaVersion.toVersion(targetVersion)
        }
    }

    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this task, sources will not be generated.
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = "sources"
        from(sourceSets.main.allSource)
    }

    jar {
        from("LICENSE")
    }
}

archivesBaseName = "manhunt"
version = Globals.modVer

minecraft {
}

dependencies {
    implementation project(":manhunt-base")
    implementation project(":manhunt-api")
    afterEvaluate {
        include project(":manhunt-api")
        include project(":manhunt-base")
    }
}

remapJar.dependsOn(project(":manhunt-api").tasks.remapJar)
remapJar.dependsOn(project(":manhunt-base").tasks.remapJar)

import com.modrinth.minotaur.TaskModrinthUpload

task publishToMR(type: TaskModrinthUpload) {
    token = System.getenv("MODRINTH_API_TOKEN") // Token
    // Project Info
    projectId = Globals.modrinthId
    versionNumber = Globals.modVer
    // Files
    uploadFile = remapJar
    addFile file("${project.buildDir}/libs/${project.archivesBaseName}-${Globals.modVer}-dev.jar")
    addFile file("${project.buildDir}/libs/${project.archivesBaseName}-${Globals.modVer}-sources.jar")
    // Metadata
    Globals.modrinthMcVers.forEach {
        addGameVersion(it)
    }
    addLoader("fabric")
    versionName = "[$Globals.mcVer] $archivesBaseName $Globals.modVer"
    changelog = Globals.modrinthChangelog != null && Globals.modrinthChangelog != "" ? Globals.modrinthChangelog : ""

    afterEvaluate {
        tasks.publishToMR.dependsOn(remapJar)
        tasks.publishToMR.dependsOn(sourcesJar)
    }
}

javadoc {
    options {
        source = "8"
        encoding = "UTF-8"
        charSet = "UTF-8"
        memberLevel = JavadocMemberLevel.PRIVATE
        links(
                "http://maven.fabricmc.net/docs/fabric-api-${Globals.fapiVer}",
                "http://jenkins.liteloader.com/job/Mixin/javadoc/"
        )
    }

    allprojects.each {
        source(it.sourceSets.main.allJava.srcDirs)
    }

    classpath = sourceSets.main.runtimeClasspath
    failOnError = false
}

processResources {
    inputs.property("version", Globals.modVer)

    from(sourceSets.main.resources.srcDirs) {
        include("fabric.mod.json")
        expand("version": Globals.modVer)
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude("fabric.mod.json")
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(jar) {
                builtBy remapJar
            }
            artifact("${project.buildDir.absolutePath}/libs/${archivesBaseName}-${Globals.modVer}.jar") {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // select the repositories you want to publish to
    repositories {
        // uncomment to publish to the local maven
        // mavenLocal()
    }
}
